//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-147 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.08.04 at 10:06:44 PM WEST 
//


package com.example.Convert_XML.Entities;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for report_type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="report_type">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="AIF"/>
 *     &lt;enumeration value="IRD"/>
 *     &lt;enumeration value="IRI"/>
 *     &lt;enumeration value="ISR-R"/>
 *     &lt;enumeration value="ISR-S"/>
 *     &lt;enumeration value="L1988"/>
 *     &lt;enumeration value="L1989"/>
 *     &lt;enumeration value="ORI"/>
 *     &lt;enumeration value="SIR"/>
 *     &lt;enumeration value="STR"/>
 *     &lt;enumeration value="STR_A"/>
 *     &lt;enumeration value="TCO"/>
 *     &lt;enumeration value="TFR"/>
 *     &lt;enumeration value="TFR_A"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "report_type")
@XmlEnum
public enum ReportType {

    AIF("AIF"),
    IRD("IRD"),
    IRI("IRI"),
    @XmlEnumValue("ISR-R")
    ISR_R("ISR-R"),
    @XmlEnumValue("ISR-S")
    ISR_S("ISR-S"),
    @XmlEnumValue("L1988")
    L_1988("L1988"),
    @XmlEnumValue("L1989")
    L_1989("L1989"),
    ORI("ORI"),
    SIR("SIR"),
    STR("STR"),
    STR_A("STR_A"),
    TCO("TCO"),
    TFR("TFR"),
    TFR_A("TFR_A");
    private final String value;

    ReportType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ReportType fromValue(String v) {
        for (ReportType c: ReportType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
